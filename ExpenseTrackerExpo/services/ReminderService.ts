import AsyncStorage from '@react-native-async-storage/async-storage';
import { Reminder } from '../types/PaymentTypes';

const API_BASE_URL = 'http://192.168.1.4:5000/api';

// Get auth token following existing app pattern
const getAuthToken = async () => {
  try {
    const token = await AsyncStorage.getItem('authToken');
    console.log('🔍 ReminderService: Retrieved auth token:', token ? `Token found: ${token.substring(0, 20)}...` : 'No token');
    if (!token) {
      console.log('🔍 ReminderService: No auth token found, using test token');
      return 'test-token';
    }
    return token;
  } catch (error) {
    console.log('🔍 ReminderService: Error getting auth token:', error);
    return 'test-token';
  }
};

// Get user ID for local storage keys
const getUserId = async () => {
  try {
    const userData = await AsyncStorage.getItem('user');
    if (userData) {
      const user = JSON.parse(userData);
      return user.email || user.id || 'default';
    }
    return 'default';
  } catch (error) {
    console.log('🔍 ReminderService: Error getting user ID:', error);
    return 'default';
  }
};

// Local storage helpers
const getLocalStorageKey = async (suffix: string) => {
  const userId = await getUserId();
  return `reminders_${suffix}_${userId}`;
};

export default {
  /**
   * Get all reminders from backend API only (cloud-first approach)
   */
  async getReminders(): Promise<Reminder[]> {
    try {
      console.log('🔍 ReminderService: Fetching reminders from backend API...');
      
      const token = await getAuthToken();
      const response = await fetch(`${API_BASE_URL}/reminders`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });

      console.log('🔍 ReminderService: Response status:', response.status);

      if (!response.ok) {
        console.error('🔍 ReminderService: HTTP error! status:', response.status);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('🔍 ReminderService: API response:', result);
      
      if (result.success) {
        console.log('🔍 ReminderService: Successfully fetched reminders:', result.data.length);
        
        // Convert backend format to mobile app format
        const reminders = result.data.map((backendReminder: any) => ({
          id: backendReminder.id,
          title: backendReminder.title,
          description: backendReminder.description,
          type: backendReminder.type,
          date: new Date(backendReminder.due_date),
          dueDate: new Date(backendReminder.due_date),
          time: backendReminder.reminder_time ? backendReminder.reminder_time.split(':').slice(0, 2).join(':') : '09:00', // Convert HH:MM:SS to HH:MM
          isEnabled: backendReminder.is_enabled !== undefined ? backendReminder.is_enabled : true,
          repeat: backendReminder.repeat_type || 'none',
          category: backendReminder.category,
          amount: backendReminder.amount,
          isAutoGenerated: backendReminder.is_auto_generated || false,
          sourceType: backendReminder.source_type || 'manual',
          sourceId: backendReminder.source_id,
          createdAt: new Date(backendReminder.created_at),
          updatedAt: new Date(backendReminder.updated_at)
        }));

        // Update local cache for offline reference (read-only)
        const storageKey = await getLocalStorageKey('all');
        await AsyncStorage.setItem(storageKey, JSON.stringify(reminders));
        
        return reminders;
      } else {
        console.error('🔍 ReminderService: API returned error:', result.message);
        throw new Error(result.message || 'Failed to fetch reminders');
      }
    } catch (error) {
      console.error('🔍 ReminderService: Error fetching reminders from API:', error);
      console.log('🔍 ReminderService: No fallback - cloud storage is the single source of truth');
      
      // Return empty array if cloud is unavailable
      return [];
    }
  },

  /**
   * Create a new reminder via API only (cloud-first approach)
   */
  async createReminder(reminder: Omit<Reminder, 'id' | 'createdAt' | 'updatedAt'>): Promise<{ success: boolean; id?: string }> {
    try {
      console.log('🔍 ReminderService: Creating reminder via API...');
      console.log('🔍 ReminderService: Original dueDate:', reminder.dueDate, typeof reminder.dueDate);
      
      const token = await getAuthToken();
      
      // Ensure dueDate is properly converted to Date object
      const dueDate = new Date(reminder.dueDate);
      if (isNaN(dueDate.getTime())) {
        console.error('🔍 ReminderService: Invalid dueDate:', reminder.dueDate);
        throw new Error('Invalid dueDate provided');
      }
      
      // Convert mobile app format to backend format
      const backendReminder = {
        title: reminder.title,
        description: reminder.description,
        type: reminder.type,
        dueDate: dueDate.toISOString(), // Ensure proper Date object conversion
        reminderTime: reminder.time.split(':').slice(0, 2).join(':'), // Convert HH:MM:SS:MS to HH:MM (keep only hours and minutes)
        isEnabled: reminder.isEnabled,
        repeatType: reminder.repeat,
        category: reminder.category,
        amount: reminder.amount,
        isAutoGenerated: reminder.isAutoGenerated || false,
        sourceType: reminder.sourceType || 'manual', // Default to 'manual' if null/undefined
        sourceId: reminder.sourceId || undefined // Remove null values
      };
      
      console.log('🔍 ReminderService: Converted dueDate:', backendReminder.dueDate);
      console.log('🔍 ReminderService: Converted reminderTime:', backendReminder.reminderTime);
      console.log('🔍 ReminderService: SourceType:', backendReminder.sourceType);
      console.log('🔍 ReminderService: SourceId:', backendReminder.sourceId);

      const response = await fetch(`${API_BASE_URL}/reminders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(backendReminder),
      });

      console.log('🔍 ReminderService: Create reminder response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('🔍 ReminderService: HTTP error! status:', response.status);
        console.error('🔍 ReminderService: Error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('🔍 ReminderService: Successfully created reminder:', result.data?.id);
      
      if (result.success) {
        return { success: true, id: result.data.id };
      } else {
        console.error('🔍 ReminderService: API returned error:', result.message);
        throw new Error(result.message || 'Failed to create reminder');
      }
    } catch (error) {
      console.error('🔍 ReminderService: Error creating reminder via API:', error);
      console.log('🔍 ReminderService: No fallback - cloud storage is required');
      
      // No fallback - cloud storage is the single source of truth
      throw error;
    }
  },

  /**
   * Update a reminder via API only (cloud-first approach)
   */
  async updateReminder(id: string, updates: Partial<Reminder>): Promise<{ success: boolean }> {
    try {
      console.log('🔍 ReminderService: Updating reminder via API...');
      
      const token = await getAuthToken();
      
      // Convert mobile app format to backend format
      const backendUpdates: any = {};
      if (updates.title !== undefined) backendUpdates.title = updates.title;
      if (updates.description !== undefined) backendUpdates.description = updates.description;
      if (updates.type !== undefined) backendUpdates.type = updates.type;
      if (updates.dueDate !== undefined) backendUpdates.dueDate = new Date(updates.dueDate).toISOString();
      if (updates.time !== undefined) backendUpdates.reminderTime = updates.time.split(':').slice(0, 2).join(':'); // Convert HH:MM:SS:MS to HH:MM (keep only hours and minutes)
      if (updates.isEnabled !== undefined) backendUpdates.isEnabled = updates.isEnabled;
      if (updates.repeat !== undefined) backendUpdates.repeatType = updates.repeat;
      if (updates.category !== undefined) backendUpdates.category = updates.category;
      if (updates.amount !== undefined) backendUpdates.amount = updates.amount;
      if (updates.sourceType !== undefined) backendUpdates.sourceType = updates.sourceType || 'manual';
      if (updates.sourceId !== undefined) backendUpdates.sourceId = updates.sourceId || undefined;

      const response = await fetch(`${API_BASE_URL}/reminders/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(backendUpdates),
      });

      console.log('🔍 ReminderService: Update reminder response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('🔍 ReminderService: HTTP error! status:', response.status);
        console.error('🔍 ReminderService: Error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('🔍 ReminderService: Successfully updated reminder');
      
      if (result.success) {
        return { success: true };
      } else {
        console.error('🔍 ReminderService: API returned error:', result.message);
        throw new Error(result.message || 'Failed to update reminder');
      }
    } catch (error) {
      console.error('🔍 ReminderService: Error updating reminder via API:', error);
      console.log('🔍 ReminderService: No fallback - cloud storage is required');
      
      // No fallback - cloud storage is the single source of truth
      throw error;
    }
  },

  /**
   * Delete a reminder via API only (cloud-first approach)
   */
  async deleteReminder(id: string): Promise<{ success: boolean }> {
    try {
      console.log('🔍 ReminderService: Deleting reminder via API...');
      
      const token = await getAuthToken();
      const response = await fetch(`${API_BASE_URL}/reminders/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });

      console.log('🔍 ReminderService: Delete reminder response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('🔍 ReminderService: HTTP error! status:', response.status);
        console.error('🔍 ReminderService: Error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('🔍 ReminderService: Successfully deleted reminder');
      
      if (result.success) {
        return { success: true };
      } else {
        console.error('🔍 ReminderService: API returned error:', result.message);
        throw new Error(result.message || 'Failed to delete reminder');
      }
    } catch (error) {
      console.error('🔍 ReminderService: Error deleting reminder via API:', error);
      console.log('🔍 ReminderService: No fallback - cloud storage is required');
      
      // No fallback - cloud storage is the single source of truth
      throw error;
    }
  },

  /**
   * Get reminder statistics
   */
  async getReminderStats(): Promise<any> {
    try {
      console.log('🔍 ReminderService: Fetching reminder stats from API...');
      
      const token = await getAuthToken();
      const response = await fetch(`${API_BASE_URL}/reminders/stats`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        console.log('🔍 ReminderService: Successfully fetched reminder stats');
        return result.data;
      } else {
        throw new Error(result.message || 'Failed to fetch reminder stats');
      }
    } catch (error) {
      console.error('🔍 ReminderService: Error fetching reminder stats:', error);
      
      // Fallback to local calculation
      const reminders = await this.getReminders();
      return {
        total: reminders.length,
        active: reminders.filter(r => r.isEnabled).length,
        autoGenerated: reminders.filter(r => r.isAutoGenerated).length,
        upcoming: reminders.filter(r => r.dueDate > new Date()).length,
        overdue: reminders.filter(r => r.dueDate < new Date() && r.repeat === 'none').length,
        byType: reminders.reduce((acc, r) => {
          acc[r.type] = (acc[r.type] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
      };
    }
  },


};
